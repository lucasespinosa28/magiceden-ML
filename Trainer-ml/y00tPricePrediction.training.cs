// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace Trainer_ml
{
    public partial class Y00tPricePrediction
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(@"Face", @"Face", outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.Conversion.ConvertType(@"Unique", @"Unique"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Background",outputColumnName:@"Background"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Fur",outputColumnName:@"Fur"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Clothes",outputColumnName:@"Clothes"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Eyewear",outputColumnName:@"Eyewear"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Head",outputColumnName:@"Head"))      
                                    .Append(mlContext.Transforms.Conversion.ConvertType(@"DateTime", @"DateTime"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Face",@"Unique",@"Background",@"Fur",@"Clothes",@"Eyewear",@"Head",@"DateTime"}))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.Regression.Trainers.FastTreeTweedie(new FastTreeTweedieTrainer.Options(){NumberOfLeaves=83,MinimumExampleCountPerLeaf=4,NumberOfTrees=28,MaximumBinCountPerFeature=69,FeatureFraction=0.99999999,LearningRate=0.999999776672986,LabelColumnName=@"Price",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
